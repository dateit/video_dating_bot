// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ANONYMOUS
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id String @id @default(uuid())

  telegramId     String  @unique @db.VarChar(64)
  telegramChatId String? @unique @db.VarChar(64)
  language       String  @default("en") @db.VarChar(64)
  username       String  @default("") @db.VarChar(128)
  firstname      String? @default("") @db.VarChar(128)
  lastname       String? @default("") @db.VarChar(128)
  videoNoteId    String? @db.VarChar(128)
  surveyWasShown Boolean @default(false)

  gender     Gender?
  lookingFor Gender?
  age        Int?

  role Role @default(ANONYMOUS)

  liker Likes[] @relation("LikerUser")
  liked Likes[] @relation("LikedUser")

  reporter Report[] @relation("ReporterUser")
  reports  Report[] @relation("ReportedUser")

  deletedVideos DeletedVideos[] @relation("DeletedVideosUser")

  createdAt    DateTime  @default(now())
  lastActivity DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique(fields: [id, gender, lookingFor], name: "find_matches_users")
  @@index([gender, lookingFor])
  @@index([username])
}

model Likes {
  id        String    @id @default(uuid())
  liker     User      @relation("LikerUser", fields: [likerId], references: [id])
  liked     User      @relation("LikedUser", fields: [likedId], references: [id])
  mutual    Boolean   @default(false)
  dislike   Boolean   @default(false)
  likedId   String
  likerId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([likedId, likerId])
  @@index([likedId])
  @@index([likerId])
  @@index([likedId, dislike, mutual])
  @@index([likedId, dislike], name: "find_disliked_liked")
  @@index([likedId, mutual], name: "find_mutual_liked")
  @@index([likerId, mutual], name: "find_mutual_liker")
}

model DeletedVideos {
  id      String  @id @default(uuid())
  reason  String? @db.VarChar(256)
  videoId String  @db.VarChar(128)
  userId  String

  user User @relation("DeletedVideosUser", fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([videoId, userId])
  @@index([userId])
}

model Media {
  id                String @id @default(uuid())
  telegramMediaId   String @db.VarChar(128)
  telegramMediaType String @db.VarChar(64)
  type              String @db.VarChar(64)

  createdAt DateTime @default(now())

  @@index([type])
  @@index([telegramMediaId])
}

model Report {
  id       String  @id @default(uuid())
  reason   String? @db.VarChar(256)
  reporter User    @relation("ReporterUser", fields: [reporterId], references: [id])
  reported User    @relation("ReportedUser", fields: [reportedId], references: [id])

  reporterId String
  reportedId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([reportedId])
}

model Session {
  id   String @id @default(uuid())
  data String
}
